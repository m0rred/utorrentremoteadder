# -*- coding: utf-8 -*-
"""Subclass of MyFrame1, which is generated by wxFormBuilder."""

import wx
import UTRA
import torrentinfo
import sys
import os
import traceback
import utorrent.client as uclient
import wx.lib.mixins.listctrl as listmix

class uTorrentRemoteAdderMyFrame1( UTRA.MyFrame1 , listmix.ColumnSorterMixin):
#TODO : settings in xml file
	torrent = None
	client = None
	labels = []
	files = []
	selectedfiles = []
	index = 0
	itemDataMap ={}
	
	def __init__( self, parent ):		
		UTRA.MyFrame1.__init__( self, parent )
		self.filepath = ' '.join(sys.argv[1:])		
		self.torrent = torrentinfo.torrentinfo(self.filepath)
		self.refreshtorrentcontent()
		self.client = uclient.UTorrentClient('http://192.168.1.102:8881/gui/','admin','i05120127')#TODO get name and pass from settings file		
		self.refreshclientinfo()		
	
	def refreshtorrentcontent(self):
		if self.torrent <> None:
			self.m_staticText20.SetLabel(self.torrent.name.decode('utf8'))			
			self.m_staticText22.SetLabel(self.torrent.comment.decode('utf8'))
			self.m_staticText24.SetLabel(torrentinfo.sizeof_fmt(self.torrent.length))
			self.m_staticText26.SetLabel(self.torrent.date)
			for i in self.torrent.files:
				self.m_treeCtrl1.InsertStringItem(self.index, ('/'.join(i['path'])).decode('utf8'))				
				self.m_treeCtrl1.SetStringItem(self.index, 1, torrentinfo.sizeof_fmt(i['length']))
				self.m_treeCtrl1.SetItemData(self.index,  self.index)
				self.itemDataMap.update({self.index:(i['path'][0],torrentinfo.sizeof_fmt(i['length']))})
				self.index += 1				
			if len(self.torrent.files) == 1:
				self.m_treeCtrl1.CheckItem(0,True)
			listmix.ColumnSorterMixin.__init__(self, 2)
			self.SortListItems(col = 0)
		else:
			raise Exception('client initializing error')
	
	def GetListCtrl(self):
		return self.m_treeCtrl1
		
	def refreshclientinfo(self):
		for i in self.client.list()[1]['label']:
			self.labels.append(i[0])
		self.m_comboBox4.Clear()
		self.m_comboBox4.AppendItems(self.labels)
		#TODO : set default label
		#pos = self.m_comboBox4.FindString()
		#if pos <> wx.NOT_FOUND:
			#self.m_comboBox4.Select(pos)
		
	def savefiledialogbuttonclick( self, event ):
		# TODO: Implement savefiledialogbuttonclick
		pass
	
	def selectallbuttonclick( self, event ):
		for i in xrange(self.m_treeCtrl1.GetItemCount()):
			self.m_treeCtrl1.CheckItem(i,True)		
	
	def selectnonebuttonclick( self, event ):
		for i in xrange(self.m_treeCtrl1.GetItemCount()):
			self.m_treeCtrl1.CheckItem(i,False)		
	
	def advancedbuttonclick( self, event ):		
		pass
		
	def okbuttonclick( self, event ):		
		self.client.addfile(self.torrent.name,filepath = self.filepath)
		self.client.pause(self.torrent.hash)
		if self.m_comboBox4.GetValue():
			self.client.setprops(self.torrent.hash,'label',self.m_comboBox4.GetValue())
		for i in self.client.getfiles(self.torrent.hash)[1]['files'][1]:
			self.files.append(i[0])
		self.selectedfiles = []
		for i in xrange(self.m_treeCtrl1.ItemCount):
			if not self.m_treeCtrl1.IsChecked(i):
				self.selectedfiles.append(self.files.index(self.itemDataMap[self.m_treeCtrl1.GetItemData(i)][0]))
		if len(self.selectedfiles) <> len (self.files):
			self.client.setprio(self.torrent.hash,0,*self.selectedfiles)
			if self.m_checkBox1.IsChecked() == True:
				self.client.start(self.torrent.hash)
		self.Destroy()
	
	def cancelbuttonclick( self, event ):		
		self.Destroy()
try:
	app = wx.App(False)
	frame = uTorrentRemoteAdderMyFrame1(None)
	frame.Show(True)	
	app.MainLoop()
except Exception as e:	
	with open("c://utorrentadder_error.log","a") as f:
		f.write('===================================================\n')		
		exc_type, exc_value, exc_traceback = sys.exc_info()
		lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
		f.write(''.join(lines))